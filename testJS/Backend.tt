<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bridge;

<# var projectName = "testJS";#>
<# 
	var gen = new BridgeGenerator(this); 
	List<Param> list = new List<Param>();
	list.Add(new Param("string","message"));
#>

namespace <#=projectName#>
{
    [Ignore]
    public static class <#=BridgeGenerator.jsObject#>
    {
		<# gen.generateMethod("onClick", "string",list); #>
		<# gen.generateMethod("onClick2", "string", list); #>
    }
}

<#+
	public class Param
    {
		public string paramType;
		public string paramName;

		public Param(string paramType, string paramName)
        {
			this.paramType = paramType;
			this.paramName = paramName;
        }
    }

	public class ParamWriter
	{
		public List<Param> mList;

		public ParamWriter(List<Param> list)
        {
			mList = list;
        }

		public string writeParams()
        {
			string output = "";
			foreach (Param param in mList)
            {
				output += param.paramType;
				output += " ";
				output += param.paramName;
				if( param != mList.Last())
					output += ", ";
            }
			return output;
        }

		public string writeBridgeParams()
        {
			string output = "";
			foreach (Param param in mList)
            {
				output += param.paramName;
				if(param != mList.Last())
					output += ", ";
            }
			return output;

        }
    }

	public class BridgeGenerator 
	{

		private TextTransformation mOutput;

		public BridgeGenerator(TextTransformation output)
        {
			mOutput = output;
        }
		
		private void Write( string code)
        {
			mOutput.Write(code);
        }

		public static string jsObject = "jsObject";
		public void generateMethod(string methodName, string returnType, List<Param> paramList) 
		{
			ParamWriter pWriter = new ParamWriter(paramList);
			mOutput.ClearIndent();
			mOutput.PushIndent("        ");
#>
[Template("<#=jsObject#>.<#=methodName#>({<#=pWriter.writeBridgeParams()#>})")]
public static <#=returnType#> <#=methodName#> ( <#=pWriter.writeParams()#> )
{
	return "";
}
<#+
			mOutput.ClearIndent();
		}
	}
#>