<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bridge;

<# string fileNamespace="JS";#>
<# 
	XMLReader xmlReader = new XMLReader(Host.ResolvePath("methods.xml"));
	xmlReader.readMethods();

	string jsObject = "jsObject";
#>

namespace <#=fileNamespace#>
{
    [Ignore]
    public static class <#=jsObject#>
    {
<#
	foreach(JSMethod method in xmlReader.methods)
    {
#>
		[Template("<#=jsObject#>.<#=method.name#>(<# foreach(Param param in method.parameters) { #>{<#=param.paramName#>}<# if(param != method.parameters.Last() )#>,<# }#>)")]
		public static extern <#=method.returnType#> <#=method.name#>(<# foreach(Param param in method.parameters) { #> <#=param.paramType#> <#=param.paramName#> <# if(param != method.parameters.Last() )#> ,<# }#>);
<#	} #>
	}
}

<#+

	public class Param
    {
		public string paramType;
		public string paramName;

		public Param(string paramType, string paramName)
        {
			this.paramType = paramType;
			this.paramName = paramName;
        }
    }

	public class JSMethod
    {
        public string name;
        public List<Param> parameters = new List<Param>();
        public string returnType;

        public JSMethod() {}
    }


	public class XMLReader
    {
		private string xmlPath;
		XmlDocument doc = new XmlDocument();
		public List<JSMethod> methods = new List<JSMethod>();

		private XMLReader() {}
		public XMLReader(string xmlPath)
        {
			this.xmlPath = xmlPath;

			if(xmlPath != null)
				doc.Load(xmlPath);

        }

		public JSMethod readMethod()
        {
			JSMethod method = new JSMethod();
			return method;
        }

		public void readMethods()
        {
			foreach (XmlNode node in doc.SelectNodes("//methods/Method"))
			{
				JSMethod method = new JSMethod();
				method.name = node.SelectSingleNode("./name").InnerText;

				foreach(XmlNode paramNode in node.SelectSingleNode("./parameters"))
                {
					Param param = new Param(paramNode.SelectSingleNode("./paramType").InnerText,paramNode.SelectSingleNode("./paramName").InnerText);
					method.parameters.Add(param);
                }

				method.returnType = node.SelectSingleNode("./returnType").InnerText;

				methods.Add(method);

			}
        }
		
    }
#>